<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shop.petpal.mapper.ProductMapper">
	<!-- 상품 상세 -->
	<select id="findById" parameterType="Long" resultType="com.shop.petpal.domain.Product">
		SELECT p.productNum, p.categoryNum, p.productClass, p.productStatus, p.species, 
            c.categoryName, p.productName, p.price, p.brand, po.optionCount,
			p.discountRate, NVL(p.discountAmount,0) discountAmount, p.deliveryCharge, 
			p.thumbnail, p.content, p.regDate, ps.totalStock,
			NVL(rating, 0) rating, NVL(reviewCount, 0) reviewCount,
			NVL(questionCount, 0) questionCount,
			TO_CHAR(startDate, 'YYYY-MM-DD HH24:MI') startDate,
			TO_CHAR(endDate, 'YYYY-MM-DD HH24:MI') endDate,
			NVL(showSpecial, 0) showSpecial
		FROM product p
		JOIN category c ON p.categoryNum = c.categoryNum
		LEFT OUTER JOIN (
			SELECT productNum, NVL(SUM(totalStock), 0) totalStock
			FROM productStock
			GROUP BY productNum
		) ps ON p.productNum = ps.productNum		
		LEFT OUTER JOIN specialDetail d ON p.productNum = d.productNum
		LEFT OUTER JOIN special s ON d.specialNum = s.specialNum
		LEFT OUTER JOIN (
			SELECT productNum, ROUND(AVG(rating), 1) rating, COUNT(*) reviewCount
			FROM review
			WHERE showReview = 1
			GROUP BY productNum
		) t ON p.productNum = t.productNum
        LEFT OUTER JOIN ( 
            SELECT productNum, COUNT(*) optionCount
            FROM productOption
            GROUP BY productNum
        ) po ON p.productNum = po.productNum
		LEFT OUTER JOIN (
			SELECT productNum, COUNT(*) questionCount
			FROM productQna
			WHERE showQuestion = 1			
			GROUP BY productNum
		) q ON p.productNum = q.productNum
		WHERE p.productStatus = 1 AND p.productNum = #{productNum}
	</select>
	
	<select id="listProductFile" parameterType="Long" resultType="com.shop.petpal.domain.Product">
		SELECT fileNum, productNum, fileName
		FROM productImage
		WHERE productNum = #{productNum}
	</select>
	
	<select id="listProductOption" parameterType="Long" resultType="com.shop.petpal.domain.Product">
		SELECT optionNum, optionName, productNum, parentOption
		FROM productOption
		WHERE productNum = #{productNum}
		ORDER BY parentOption NULLS FIRST, parentOption
	</select>
	
	<select id="listOptionDetail" parameterType="Long" resultType="com.shop.petpal.domain.Product">
		SELECT detailNum, optionValue, optionNum
		FROM optionDetail
		WHERE optionNum = #{optionNum}
		ORDER BY detailNum
	</select>
	
	<select id="listOptionDetailStock" parameterType="map" resultType="com.shop.petpal.domain.Product">
		SELECT ps.stockNum, ps.productNum, ps.detailNum1 detailNum, ps.detailNum2, ps.totalStock, 
			op1.optionNum optionNum1, op1.optionName optionName1, 
			op2.optionNum optionNum2, op2.optionName optionName2,
			od1.detailNum detailNum1, od1.optionValue optionValue1,
			od2.detailNum detailNum2, od2.optionValue optionValue2
		FROM (
			SELECT stockNum, productNum, totalStock, detailNum1, detailNum2
			FROM productStock
			WHERE productNum = #{productNum}
			<if test="detailNum1 != null and detailNum1 != 0">
				AND detailNum1 = #{detailNum1}
			</if>
		) ps
		LEFT OUTER JOIN (
			SELECT optionNum, productNum, optionName, parentOption
			FROM productOption
			WHERE productNum = #{productNum} AND parentOption IS NULL
		) op1 ON ps.productNum = op1.productNum
		LEFT OUTER JOIN (
			SELECT optionNum, productNum, optionName, parentOption
			FROM productOption
			WHERE productNum = #{productNum} AND parentOption IS NOT NULL
		) op2 ON op1.optionNum = op2.parentOption
		LEFT OUTER JOIN optionDetail od1 ON ps.detailNum1 = od1.detailNum
		LEFT OUTER JOIN optionDetail od2 ON ps.detailNum2 = od2.detailNum
		WHERE NVL(ps.totalStock, 0) &gt; 0
		ORDER BY ps.detailNum1, ps.detailNum2
	</select>
	
	<insert id="insertLike" parameterType="map">
		INSERT INTO wishList(productNum, memberNum) 
		VALUES(#{productNum}, #{memberNum})
	</insert>
	
	<delete id="deleteLike">
		DELETE FROM wishList
		WHERE productNum = #{productNum} AND memberNum = #{memberNum}
	</delete>
	
	<select id="userProductLiked" parameterType="map" resultType="com.shop.petpal.domain.Product">
		select productNum, memberNum
        FROM wishList
        WHERE productNum = #{productNum} AND memberNum = #{memberNum}
	</select>
	
	
	<!-- 상품 목록 -->
	<select id="listCategory" parameterType="Integer" resultType="map">
		SELECT categoryNum, categoryName, sortOrder, species
		FROM category
		WHERE parentCategory IS NULL
			AND species = #{species}
		ORDER BY sortOrder ASC
	</select>
	
	<select id="listSubCategory" parameterType="map" resultType="map">
		SELECT categoryNum, categoryName, parentCategory, sortOrder, species
		FROM category
		WHERE species = #{species}
			<if test="parentCategory != 0">
				AND parentCategory = #{parentCategory}
			</if>
			<if test="parentCategory == 0">
				AND parentCategory IS NULL
			</if>
    	ORDER BY sortOrder ASC
	</select>
	
	<!-- 신상품 -->
	<!-- TODO: 서브쿼리 최대한 줄여서 다시 짜기 -->
	<select id="listRecentProducts" parameterType="map" resultType="com.shop.petpal.domain.Product">
		SELECT p.productNum, productName, productClass, price, discountRate, discountAmount,
			thumbnail, species, brand, regDate, NVL(COUNT(rating), 0) reviewCount, NVL(AVG(rating), 0) rating
		FROM (
		    SELECT *
		            FROM (SELECT inner.*, ROWNUM rnum
		                FROM (
		                    SELECT p.*
		                    FROM product p
		                    <if test="categoryNum != null and categoryNum != 0">
								LEFT OUTER JOIN category c
		                        	ON p.categoryNum = c.categoryNum
							</if>
		                    WHERE TO_CHAR(regDate, 'YYYYMMDD') &gt;= #{baseDate}
		                    	AND productStatus = 1
		                        AND p.species = #{species}
		                        <if test="categoryNum != null and categoryNum != 0">
									AND c.parentCategory = #{categoryNum}
								</if>
		                    ORDER BY regDate DESC
		                ) inner
	               WHERE ROWNUM &lt;= #{endNum}
	           )
	           WHERE rnum &gt;= #{startNum}
		    ) p
		LEFT OUTER JOIN orderDetail od
		    ON p.productNum = od.productNum
		LEFT OUTER JOIN review r
		    ON od.orderDetailNum = r.orderDetailNum
		GROUP BY (p.productNum, productName, productClass, price, discountRate, discountAmount,
			thumbnail, species, brand, regDate)
		ORDER BY regDate DESC
	</select>
	
	<!-- TODO: 리뷰가 없는 상품은 출력하지 않도록 수정 -->
	<!-- 베스트 상품 -->
	<select id="listBestProducts" parameterType="map" resultType="com.shop.petpal.domain.Product">
		SELECT p.productNum, productName, productClass, price, discountRate, discountAmount, 
                    thumbnail, p.species, brand, regDate,
                    NVL(sales, 0) sales, NVL(reviewCount, 0) reviewCount, NVL(rating, 0) rating
		FROM product p
		<if test="categoryNum != null and categoryNum != 0">
		LEFT OUTER JOIN category c
			ON p.categoryNum = c.categoryNum
		</if>	
		LEFT OUTER JOIN
			(SELECT productNum, NVL(COUNT(orderDetailNum), 0) sales
			 FROM orderDetail
			 GROUP BY (productNum)) od ON p.productNum = od.productNum
		LEFT OUTER JOIN
			(SELECT productNum, NVL(COUNT(rating), 0) reviewCount, NVL(AVG(rating), 0) rating
			 FROM review
			 GROUP BY productNum) r ON p.productNum = r.productNum
		WHERE p.species = #{species}
			<if test="categoryNum != null and categoryNum != 0">
			AND c.parentCategory = #{categoryNum}
			</if>
		ORDER BY sales DESC, rating DESC
		FETCH FIRST #{endNum} ROWS ONLY
	</select>
	
	<select id="listAttribute" parameterType="map" resultType="map">
        SELECT  a.attributeNum, attributeName, categoryNum, attrDtlNum, attrDtlName
		FROM attribute a
		JOIN attributeDetail d
			ON a.attributeNum = d.attributeNum
		WHERE categoryNum = #{parentCategory}
		ORDER BY attributeNum, attrDtlNum
	</select>
	
	<!-- NOTE: categoryNum, parentCategory, species, sortBy, order, attributes, minPrice, maxPrice, minRating -->
	<select id="listCategorizedProducts" parameterType="map" resultType="com.shop.petpal.domain.Product">
		SELECT p.productNum, p.productName, p.productClass, p.price, p.discountRate,
				p.deliveryCharge, p.thumbnail, p.productStatus, p.regDate,
				p.modifyDate, p.species, p.brand, p.discountAmount,
				NVL(r.reviewCount, 0) reviewCount, NVL(r.rating, 0) rating, NVL(od.sales, 0) sales
		FROM (
			SELECT *
			FROM product
			WHERE productStatus = 1 AND species = #{species}
		) p
		LEFT JOIN (
		    SELECT productNum, 
		           COUNT(orderDetailNum) reviewCount, 
		           AVG(rating) rating
		    FROM review
		    GROUP BY productNum
		) r ON p.productNum = r.productNum
		LEFT JOIN (
		    SELECT productNum, 
		           COUNT(orderDetailNum) sales
		    FROM orderDetail
		    GROUP BY productNum
		) od ON p.productNum = od.productNum
		<where> p.categoryNum IN (
		        SELECT categoryNum 
		        FROM category 
		        <if test="categoryNum != 0">
		        	WHERE categoryNum = #{categoryNum}
		        </if>
		        <if test="categoryNum == 0 and parentCategory != 0">
		        	WHERE parentCategory = #{parentCategory}
		        </if>
		    )
		  <if test="minPrice != null">
			AND p.price &gt;= #{minPrice}
		  </if>
		  <if test="maxPrice != null">
		  	AND p.price &lt;= #{maxPrice}
		  </if>
		  <if test="minRating != null">
		  	AND NVL(r.rating, 0) &gt;= #{minRating}
		  </if>
		  <if test="attributes != null">
			<foreach collection="attributes" item="dtl">
	            	AND p.productNum IN (
	            		SELECT pa.productnum
	            		FROM productAttribute pa
	            		WHERE pa.attrDtlNum = #{dtl}
	            	)
            </foreach>
		  </if>
		  <if test="kwd != null">
		  	AND INSTR(REPLACE(TRIM(p.productName), ' ', ''), #{kwd}) != 0
		  </if>
		</where>
		<if test="sortBy != null">
			ORDER BY ${sortBy} ${order}
		</if>
		OFFSET #{offset} ROWS FETCH FIRST #{pageSize} ROWS ONLY
	</select>
	
	<!-- NOTE: 데이터 개수 가져오는 쿼리 - 원본 쿼리에서 불필요한 JOIN 연산 제거 -->
	<!-- TODO: 나중에 검색 키워드 저장할 컬럼 추가 -->
	<!-- TODO: 속성값 AND 조건으로 변경 -->
	<select id="countCategorizedProducts" parameterType="map" resultType="Integer">
	    SELECT NVL(COUNT(*), 0) count
	    FROM product p
	    <where>
	        p.productStatus = 1 AND p.species = #{species}
	        AND p.categoryNum IN (
	            SELECT categoryNum 
	            FROM category 
	            <if test="categoryNum != 0">
	                WHERE categoryNum = #{categoryNum}
	            </if>
	            <if test="categoryNum == 0 and parentCategory != 0">
	                WHERE parentCategory = #{parentCategory}
	            </if>
	        )
	        <if test="minPrice != null">
	            AND p.price &gt;= #{minPrice}
	        </if>
	        <if test="maxPrice != null">
	            AND p.price &lt;= #{maxPrice}
	        </if>
	        <if test="minRating != null">
	            AND (SELECT NVL(AVG(rating), 0) 
	                 FROM review 
	                 WHERE productNum = p.productNum) &gt;= #{minRating}
	        </if>
	        <if test="attributes != null">
	            <foreach collection="attributes" item="dtl">
	            	AND p.productNum IN (
	            		SELECT pa.productnum
	            		FROM productAttribute pa
	            		WHERE pa.attrDtlNum = #{dtl}
	            	)
	            </foreach>
	        </if>
	        <if test="kwd != null">
	        	AND INSTR(REPLACE(TRIM(p.productName), ' ', ''), #{kwd}) != 0
	        </if>
	    </where>
	</select>
	
</mapper>